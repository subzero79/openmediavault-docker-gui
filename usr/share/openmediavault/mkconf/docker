#!/bin/bash
#
# @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
# @author    Volker Theile <volker.theile@openmediavault.org>
# @author    OpenMediaVault Plugin Developers <plugins@omv-extras.org>
# @copyright Copyright (c) 2009-2013 Volker Theile
# @copyright Copyright (c) 2013-2017 OpenMediaVault Plugin Developers
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

set -x

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

OMV_DOCKER_DM_NAME="conf.service.docker"
OMV_DOCKERDAEMON_JSON_CONF="/etc/docker/daemon.json"

cleanup() {
    rm -f "${tmpfile}"
    exit
}
trap cleanup 0 1 2 5 15
tmpfile=$(mktemp)

OMV_DOCKER_SHAREDFOLDERREF_UUID=$(omv-confdbadm read ${OMV_DOCKER_DM_NAME} | jq -r '.sharedfolderref')
OMV_DOCKER_SHAREDFOLDER_PATH=$(omv_get_sharedfolder_path ${OMV_DOCKER_SHAREDFOLDERREF_UUID})


_check_existing_sockets ()
{
	if [ -f "${OMV_DOCKERDAEMON_JSON_CONF}" ]; then
		dockerjson_tcp_sockets=( $(jq -r 'select(.hosts != null) | .hosts[]|contains("tcp")' ${OMV_DOCKERDAEMON_JSON_CONF}) )
		if `echo $dockerjson_tcp_sockets | grep "true"`;then
			dockerTcpSockets=true
		fi
	fi
}


_check_existing_sockets

### Check if file exists. The daemon.json file does not ship with docker-ce package. Is the standard configuration
### file for the daemon. The unix socket is not specified here as it runs by default, unless someone adds a tcp host.
### If someone adds a tcp socket then the daemon will stop listening at the unix socket rendering the plugin unusable.
### Whenever someone adds a tcp or another unix socket we have to make sure we also add the default /var/run/docker.sock that 
### the plugin php backend uses.

if [ ! -f ${OMV_DOCKERDAEMON_JSON_CONF} ]; then
	touch ${OMV_DOCKERDAEMON_JSON_CONF}
fi


if [ ! -s {OMV_DOCKERDAEMON_JSON_CONF} ]  [ ! -z $OMV_DOCKER_SHAREDFOLDERREF_UUID ];then
	cat << EOF > "${OMV_DOCKERDAEMON_JSON_CONF}"
{
  "data-root": "${OMV_DOCKER_SHAREDFOLDER_PATH}"
}
EOF
elif [ ! -s ${OMV_DOCKERDAEMON_JSON_CONF} ] && [ -z $OMV_DOCKER_SHAREDFOLDERREF_UUID ]; then
	cat << EOF > "${OMV_DOCKERDAEMON_JSON_CONF}"
{
}
EOF
### If file exists add the relevant keys (unix socket and data-root directory) to daemon.json, without altering current configurations. 
### This is relevant for users that want to keep daemon listening in tcp socket, or add a debug flag, etc.
elif [ -f ${OMV_DOCKERDAEMON_JSON_CONF} ] && [ ! -z $OMV_DOCKER_SHAREDFOLDERREF_UUID ]; then
	if [[ "${dockerTcpSockets}" == "true" ]];then
		jq -r --arg dataroot ${OMV_DOCKER_SHAREDFOLDER_PATH} \
			'.hosts|= (. + ["unix:///var/run/docker.sock"]| unique)|. + {"data-root":$dataroot}' \
			${OMV_DOCKERDAEMON_JSON_CONF} > ${tmpfile}
		cat $tmpfile > $OMV_DOCKERDAEMON_JSON_CONF
	else
		jq -r --arg dataroot ${OMV_DOCKER_SHAREDFOLDER_PATH} \
			'. + {"data-root":$dataroot}' \
			${OMV_DOCKERDAEMON_JSON_CONF} > ${tmpfile}
		cat $tmpfile > $OMV_DOCKERDAEMON_JSON_CONF
	fi
elif [ -f ${OMV_DOCKERDAEMON_JSON_CONF} ] && [ -z $OMV_DOCKER_SHAREDFOLDERREF_UUID ]; then
	if [[ "${dockerTcpSockets}" == "true" ]];then
		jq -r ${OMV_DOCKER_SHAREDFOLDER_PATH} \
			'.hosts|= (. + ["unix:///var/run/docker.sock"]| unique)|del(."data-root")' \
			${OMV_DOCKERDAEMON_JSON_CONF} > ${tmpfile}
		cat $tmpfile > $OMV_DOCKERDAEMON_JSON_CONF
	else
		jq -r ${OMV_DOCKER_SHAREDFOLDER_PATH} \
			'del(."data-root")' \
			${OMV_DOCKERDAEMON_JSON_CONF} > ${tmpfile}
		cat $tmpfile > $OMV_DOCKERDAEMON_JSON_CONF
	fi

fi